From 905ac7143dd5f238f9730891e192e6438c6a51ef Mon Sep 17 00:00:00 2001
From: Hugues Fruchet <hugues.fruchet@st.com>
Date: Thu, 13 Jun 2019 16:28:30 +0200
Subject: [PATCH 21/32] media: ov5640: reduce rate according to maximum pixel
 clock frequency

Reduce parallel port rate according to maximum pixel clock frequency
admissible by camera interface.
This allows to support any resolutions/framerate requests by decreasing
the framerate according to maximum camera interface capabilities.

Change-Id: I6d2ecb5a95f0db151d82e37b0c5ada88e6da345f
Signed-off-by: Hugues Fruchet <hugues.fruchet@st.com>
Reviewed-on: https://gerrit.st.com/105062
Reviewed-by: CITOOLS <smet-aci-reviews@lists.codex.cro.st.com>
Reviewed-by: CIBUILD <smet-aci-builds@lists.codex.cro.st.com>
Reviewed-by: Philippe CORNU <philippe.cornu@st.com>
---
 drivers/media/i2c/ov5640.c | 29 ++++++++++++++++++++++++++++-
 1 file changed, 28 insertions(+), 1 deletion(-)

diff --git a/drivers/media/i2c/ov5640.c b/drivers/media/i2c/ov5640.c
index da51e1d..28ff5ea 100644
--- a/drivers/media/i2c/ov5640.c
+++ b/drivers/media/i2c/ov5640.c
@@ -945,8 +945,10 @@ static unsigned long ov5640_calc_sys_clk(struct ov5640_dev *sensor,
 static int ov5640_set_mipi_pclk(struct ov5640_dev *sensor,
 				unsigned long rate)
 {
+	struct i2c_client *client = sensor->i2c_client;
 	const struct ov5640_mode_info *mode = sensor->current_mode;
 	u8 prediv, mult, sysdiv;
+	unsigned int pclk_freq, max_pclk_freq;
 	u8 mipi_div;
 	int ret;
 
@@ -961,6 +963,20 @@ static int ov5640_set_mipi_pclk(struct ov5640_dev *sensor,
 	else
 		mipi_div = OV5640_MIPI_DIV_PCLK;
 
+	pclk_freq = 2 * /* 2 clocks per pixel */
+		    rate *
+		    sensor->ep.bus.mipi_csi2.num_data_lanes / 16 / mipi_div;
+	max_pclk_freq = sensor->ep.bus.mipi_csi2.pclk_max_frequency;
+
+	/* clip rate according to optional maximum pixel clock limit */
+	if (max_pclk_freq && (pclk_freq > max_pclk_freq)) {
+		rate = max_pclk_freq *
+		       mipi_div * 16 / sensor->ep.bus.mipi_csi2.num_data_lanes
+		       / 2;
+		dev_dbg(&client->dev, "MIPI pixel clock too high (%d > %d Hz), reducing rate...\n",
+			pclk_freq, max_pclk_freq);
+	}
+
 	ov5640_calc_sys_clk(sensor, rate, &prediv, &mult, &sysdiv);
 
 	ret = ov5640_mod_reg(sensor, OV5640_REG_SC_PLL_CTRL0,
@@ -1002,17 +1018,28 @@ static unsigned long ov5640_calc_pclk(struct ov5640_dev *sensor,
 }
 
 static int ov5640_set_dvp_pclk(struct ov5640_dev *sensor,
-			       const struct ov5640_mode_info *mode,
 			       unsigned long rate)
 {
+	struct i2c_client *client = sensor->i2c_client;
+	const struct ov5640_mode_info *mode = sensor->current_mode;
 	u8 prediv, mult, sysdiv, pll_rdiv, bit_div, pclk_div;
 	int ret;
 	u8 dvp_pclk_divider = mode->hact < 1024 ? 2 : 1;//FIXME
+	unsigned int pclk_freq, max_pclk_freq;
 
 	ret = ov5640_write_reg(sensor, OV5640_REG_DVP_PCLK_DIVIDER,
 			       dvp_pclk_divider);
 	if (ret)
 		return ret;
+	pclk_freq = rate / dvp_pclk_divider;
+	max_pclk_freq = sensor->ep.bus.parallel.pclk_max_frequency;
+
+	/* clip rate according to optional maximum pixel clock limit */
+	if (max_pclk_freq && (pclk_freq > max_pclk_freq)) {
+		rate = max_pclk_freq * dvp_pclk_divider;
+		dev_dbg(&client->dev, "DVP pixel clock too high (%d > %d Hz), reducing rate...\n",
+			pclk_freq, max_pclk_freq);
+	}
 
 	ov5640_calc_pclk(sensor, rate, &prediv, &mult, &sysdiv, &pll_rdiv,
 			 &bit_div, &pclk_div);
-- 
2.7.4

